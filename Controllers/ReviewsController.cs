using Microsoft.AspNetCore.Authorization; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using MarketplaceAPI.Data; using MarketplaceAPI.DTOs.Review; using MarketplaceAPI.Models; using MarketplaceAPI.Services; namespace MarketplaceAPI.Controllers; [ApiController][Route("api/v1/[controller]")] public class ReviewsController:ControllerBase{ private readonly AppDbContext _db; public ReviewsController(AppDbContext db){_db=db;} [HttpPost][Authorize(Policy="Customer")] public async Task<IActionResult> Create(CreateReviewDto dto){ var uid=User.GetUserId(); bool purchased=await _db.OrderItems.Include(oi=>oi.Order).AnyAsync(oi=>oi.ProductId==dto.ProductId && oi.Order.CustomerUserId==uid); if(!purchased) return BadRequest(new{error="NOT_PURCHASED"}); bool exists=await _db.Reviews.AnyAsync(r=>r.ProductId==dto.ProductId && r.CustomerUserId==uid); if(exists) return Conflict(new{error="ALREADY_REVIEWED"}); var r=new Review{ Id=System.Guid.NewGuid(), ProductId=dto.ProductId, CustomerUserId=uid, Rating=dto.Rating, Comment=dto.Comment, CreatedAt=System.DateTime.UtcNow}; _db.Reviews.Add(r); await _db.SaveChangesAsync(); return Created($"/api/v1/reviews/{r.Id}", new ReviewDto(r.Id,r.ProductId,r.CustomerUserId,r.Rating,r.Comment,r.CreatedAt)); } [HttpGet("product/{productId:guid}")] public async Task<ActionResult<System.Collections.Generic.IEnumerable<ReviewDto>>> ForProduct(System.Guid productId){ var list=await _db.Reviews.Where(r=>r.ProductId==productId).OrderByDescending(r=>r.CreatedAt).ToListAsync(); var mapped=list.Select(r=>new ReviewDto(r.Id,r.ProductId,r.CustomerUserId,r.Rating,r.Comment,r.CreatedAt)); return Ok(mapped);} }