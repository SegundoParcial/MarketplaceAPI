using Microsoft.AspNetCore.Authorization; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using MarketplaceAPI.Data; using MarketplaceAPI.DTOs.Product; using MarketplaceAPI.Models; using MarketplaceAPI.Services; namespace MarketplaceAPI.Controllers; [ApiController][Route("api/v1/[controller]")] public class ProductsController:ControllerBase{ private readonly AppDbContext _db; public ProductsController(AppDbContext db){_db=db;} [HttpPost][Authorize(Policy="Company")] public async Task<ActionResult<ProductDto>> Create(CreateProductDto dto){ var cid=User.GetCompanyId() ?? (await _db.Companies.FirstAsync(c=>c.OwnerUserId==User.GetUserId())).Id; var p=new Product{Id=System.Guid.NewGuid(),CompanyId=cid,Name=dto.Name,Description=dto.Description,Price=dto.Price,Stock=dto.Stock}; _db.Products.Add(p); await _db.SaveChangesAsync(); return Created($"/api/v1/products/{p.Id}",new ProductDto(p.Id,p.CompanyId,p.Name,p.Description,p.Price,p.Stock)); } [HttpGet("mine")][Authorize(Policy="Company")] public async Task<ActionResult<System.Collections.Generic.IEnumerable<ProductDto>>> Mine(int page=1,int pageSize=20){ var cid=User.GetCompanyId() ?? (await _db.Companies.FirstAsync(c=>c.OwnerUserId==User.GetUserId())).Id; var items=await _db.Products.Where(p=>p.CompanyId==cid).OrderByDescending(p=>p.Id).Skip((page-1)*pageSize).Take(pageSize).Select(p=>new ProductDto(p.Id,p.CompanyId,p.Name,p.Description,p.Price,p.Stock)).ToListAsync(); return Ok(items);} [HttpPut("{id:guid}")][Authorize(Policy="Company")] public async Task<IActionResult> Update(System.Guid id,UpdateProductDto dto){ var p=await _db.Products.FindAsync(id); if(p is null) return NotFound(); var cid=User.GetCompanyId() ?? (await _db.Companies.FirstAsync(c=>c.OwnerUserId==User.GetUserId())).Id; if(p.CompanyId!=cid) return Forbid(); p.Name=dto.Name; p.Description=dto.Description; p.Price=dto.Price; p.Stock=dto.Stock; await _db.SaveChangesAsync(); return NoContent(); } [HttpDelete("{id:guid}")][Authorize(Policy="Company")] public async Task<IActionResult> Delete(System.Guid id){ var p=await _db.Products.FindAsync(id); if(p is null) return NotFound(); var cid=User.GetCompanyId() ?? (await _db.Companies.FirstAsync(c=>c.OwnerUserId==User.GetUserId())).Id; if(p.CompanyId!=cid) return Forbid(); _db.Products.Remove(p); await _db.SaveChangesAsync(); return NoContent(); } [HttpGet("{id:guid}")] public async Task<ActionResult<ProductDto>> Get(System.Guid id){ var p=await _db.Products.FindAsync(id); if(p is null) return NotFound(); return new ProductDto(p.Id,p.CompanyId,p.Name,p.Description,p.Price,p.Stock); } }