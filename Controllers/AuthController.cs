using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using MarketplaceAPI.Data; using MarketplaceAPI.Models; using MarketplaceAPI.Services; using MarketplaceAPI.DTOs.User; namespace MarketplaceAPI.Controllers; [ApiController][Route("api/v1/[controller]")] public class AuthController:ControllerBase{ private readonly AppDbContext _db; private readonly PasswordHasherService _pwd; private readonly TokenService _token; public AuthController(AppDbContext db,PasswordHasherService pwd,TokenService token){_db=db;_pwd=pwd;_token=token;} [HttpPost("login")] public async Task<ActionResult<LoginResult>> Login(LoginDto dto){ var u=await _db.Users.FirstOrDefaultAsync(x=>x.Email==dto.Email); if(u is null||!_pwd.Verify(u.PasswordHash,dto.Password)) return Unauthorized(new{error="INVALID_CREDENTIALS"}); System.Guid? companyId=null; if(u.Role=="Company"){ var c=await _db.Companies.FirstOrDefaultAsync(x=>x.OwnerUserId==u.Id); companyId=c?.Id;} var token=_token.CreateToken(u,companyId); return Ok(new LoginResult(token,u.Role,companyId)); } [HttpPost("register/company")] public async Task<IActionResult> RegisterCompany(RegisterCompanyDto dto){ if(await _db.Users.AnyAsync(x=>x.Email==dto.Email)) return Conflict(new{error="EMAIL_TAKEN"}); var user=new User{Id=System.Guid.NewGuid(),Email=dto.Email,Role="Company",PasswordHash=_pwd.Hash(dto.Password)}; var company=new Company{Id=System.Guid.NewGuid(),Name=dto.CompanyName,OwnerUserId=user.Id}; _db.Users.Add(user); _db.Companies.Add(company); await _db.SaveChangesAsync(); return Created("/api/v1/company/me",new{company.Id,company.Name}); } [HttpPost("register/customer")] public async Task<IActionResult> RegisterCustomer(RegisterCustomerDto dto){ if(await _db.Users.AnyAsync(x=>x.Email==dto.Email)) return Conflict(new{error="EMAIL_TAKEN"}); var user=new User{Id=System.Guid.NewGuid(),Email=dto.Email,Role="Customer",PasswordHash=_pwd.Hash(dto.Password)}; _db.Users.Add(user); await _db.SaveChangesAsync(); return Created("/",new{user.Id,user.Email}); } }